name: Tests

on:
  push:
    branches:
      - main
      - 'feature/*'
  pull_request:
    branches:
      - main
      - 'feature/*'

jobs:
  tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      stripe-mock:
        image: stripemock/stripe-mock:latest
        ports:
          - 12111:12111
          - 12112:12112

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, pgsql, pcov, zip, pdo, dom, curl, libxml, intl
        coverage: pcov
        
    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: Copy .env
      run: cp .env.example .env.testing
        
    - name: Configure environment for tests
      run: |
        echo "DB_CONNECTION=pgsql" >> .env.testing
        echo "DB_HOST=localhost" >> .env.testing
        echo "DB_PORT=5432" >> .env.testing
        echo "DB_DATABASE=testing" >> .env.testing
        echo "DB_USERNAME=postgres" >> .env.testing
        echo "DB_PASSWORD=postgres" >> .env.testing
        echo "STRIPE_KEY=pk_test_sample" >> .env.testing
        echo "STRIPE_SECRET=sk_test_sample" >> .env.testing
        echo "STRIPE_BASE=http://localhost:12111" >> .env.testing
        echo "TENANCY_DATABASE_AUTO_DELETE=true" >> .env.testing
        echo "TENANCY_DATABASE_AUTO_CREATE=true" >> .env.testing
        
    - name: Install dependencies
      run: composer install --prefer-dist --no-interaction --no-progress
        
    - name: Generate key
      run: php artisan key:generate --env=testing
        
    - name: Run migrations
      run: php artisan migrate --env=testing
        
    - name: Run tests
      run: vendor/bin/phpunit --coverage-clover=coverage.xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
